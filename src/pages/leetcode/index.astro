---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import Search from "astro-pagefind/components/Search";
import { PAGE_METADATA } from "@const/global";
import ProblemArrowCard from "@components/leetcode/ProblemArrowCard.astro";
import { mapToProblemCardEntry } from "@content/config";
import { difficultyOrder } from "@const/leetcode";

const allPosts = (await getCollection("leetcode")).filter(
    (post) => !post.data.draft,
);

type Acc = {
    [category: string]: CollectionEntry<"leetcode">[];
};

const posts = allPosts.reduce((acc: Acc, problem) => {
    const category = problem.data.category;
    if (!acc[category]) {
        acc[category] = [];
    }
    acc[category].push(problem);
    return acc;
}, {});

const categories = Object.keys(posts);
---

<PageLayout
    title={PAGE_METADATA.leetcode.title}
    description={PAGE_METADATA.leetcode.title}
>
    <Container>
        <div class="space-y-10">
            <h1
                class="animate font-semibold text-black dark:text-white text-3xl"
            >
                Leetcode
            </h1>
            <div class="animate">
                <Search
                    id="search"
                    className="pagefind-ui"
                    uiOptions={{ showImages: false }}
                />
            </div>
            <div class="animate space-y-4">
                {
                    categories.map((category) => {
                        //TODO: improve, I want to sleep right now :(
                        const sortedPosts = posts[category]
                            .slice()
                            .sort((a, b) => {
                                const aDiff =
                                    difficultyOrder[a.data.difficulty] ?? 99;
                                const bDiff =
                                    difficultyOrder[b.data.difficulty] ?? 99;
                                return aDiff - bDiff;
                            });
                        return (
                            <section
                                {...{ key: { category } }}
                                class="animate space-y-4"
                            >
                                <div class="font-semibold text-black dark:text-white">
                                    {category}
                                </div>
                                <div>
                                    <ul class="flex flex-col gap-4">
                                        {sortedPosts.map((post) => (
                                            <li
                                                {...{
                                                    key: post.slug as string,
                                                }}
                                            >
                                                <ProblemArrowCard
                                                    entry={mapToProblemCardEntry(
                                                        post,
                                                    )}
                                                />
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            </section>
                        );
                    })
                }
            </div>
        </div>
    </Container>
</PageLayout>
