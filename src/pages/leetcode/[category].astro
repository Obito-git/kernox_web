---
import { getCollection, type CollectionEntry } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import ProblemArrowCard from "@components/leetcode/ProblemArrowCard.astro";
import { mapToProblemCardEntry } from "@content/config";
import BackToPrev from "@components/BackToPrev.astro";
import { ContentCollection, PAGE_METADATA } from "@const/global";
import { sortProblemsByDifficulty } from "@lib/utils";

export async function getStaticPaths() {
    const allProblems: CollectionEntry<typeof ContentCollection.LEETCODE>[] = (
        await getCollection(ContentCollection.LEETCODE)
    ).filter(
        (problem: CollectionEntry<typeof ContentCollection.LEETCODE>) =>
            !problem.data.draft,
    );
    const categories = new Set(
        allProblems.map((problem) => problem.data.category),
    );
    return Array.from(categories).map((category) => ({
        params: { category },
    }));
}

const allProblems: CollectionEntry<typeof ContentCollection.LEETCODE>[] = (
    await getCollection(ContentCollection.LEETCODE)
).filter(
    (problem: CollectionEntry<typeof ContentCollection.LEETCODE>) =>
        !problem.data.draft,
);

const { category } = Astro.params as { category: string };
const selectedCategory: string = category;

const problemsForCategory: CollectionEntry<
    typeof ContentCollection.LEETCODE
>[] = allProblems.filter(
    (problem) => problem.data.category === selectedCategory,
);

const sortedProblem: CollectionEntry<typeof ContentCollection.LEETCODE>[] =
    sortProblemsByDifficulty(problemsForCategory);
---

<PageLayout
    title={`Leetcode - ${selectedCategory}`}
    description={`Problemss under ${selectedCategory}`}
>
    <Container>
        <div class="space-y-10">
            <h1
                class="animate font-semibold text-black dark:text-white text-3xl"
            >
                Leetcode - {selectedCategory}
            </h1>
            <div class="animate">
                <BackToPrev href={PAGE_METADATA.leetcode.url}>
                    Back to problems
                </BackToPrev>
            </div>
            <div class="animate space-y-4">
                <ul class="flex flex-col gap-4">
                    {
                        sortedProblem.map((problem) => (
                            <li data-key={problem.slug}>
                                <ProblemArrowCard
                                    entry={mapToProblemCardEntry(problem)}
                                />
                            </li>
                        ))
                    }
                </ul>
            </div>
        </div>
    </Container>
</PageLayout>
